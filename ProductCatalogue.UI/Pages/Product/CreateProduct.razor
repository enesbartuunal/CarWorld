@page "/productcreate"
<h2>Create Product</h2>

<EditForm Model="product" OnValidSubmit="Create" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="ProductName" class="col-md-2 col-form-label">Name:</label>
        <div class="col-md-10">
            <InputText id="name" class="form-control" @bind-Value="product.ProductName" />
            <ValidationMessage For="@(() => product.ProductName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Description" class="col-md-2 col-form-label">Description:</label>
        <div class="col-md-10">
            <InputText id="description" class="form-control" @bind-Value="product.Description" />
            <ValidationMessage For="@(() => product.Description)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Brand" class="col-md-2 col-form-label">Brand:</label>
        <div class="col-md-10">
            @*<InputText id="price" class="form-control" @bind-Value="product.Brand" />*@
            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                            Data=@BrandList @bind-Value="product.Brand" AllowFiltering="true" AllowVirtualization="true" />
            <ValidationMessage For="@(() => product.Brand)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Color" class="col-md-2 col-form-label">Color:</label>
        <div class="col-md-10">
            @*<InputText id="color" class="form-control" @bind-Value="product.Color" />*@
            <RadzenColorPicker @bind-Value=product.Color ShowHSV=true ShowRGBA=false ShowColors=true ShowButton=true />
            <ValidationMessage For="@(() => product.Color)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Price" class="col-md-2 col-form-label">Price:</label>
        <div class="col-md-10">
            <InputNumber id="price" class="form-control" @bind-Value="product.Price" />
            <ValidationMessage For="@(() => product.Price)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Image" class="col-md-2 col-form-label">Status:</label>
        <div class="col-md-10">
            @*<InputText id="status" class="form-control" @bind-Value="product.Status" />*@
            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                            Data=@StatusList @bind-Value="product.Status" />
            <ValidationMessage For="@(() => product.Status)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Image" class="col-md-2 col-form-label">Image:</label>
        <div class="col-md-10">
            <ImageUpload OnChange="AssignImageUrl" />
            <ValidationMessage For="@(() => product.Image)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="isofferable" class="col-md-2 col-form-label">IsOfferable:</label>
        <div class="col-md-10">
            <InputCheckbox id="image" class="form-control" @bind-Value="product.IsOfferable" />
            <ValidationMessage For="@(() => product.IsOfferable)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="categoryid" class="col-md-2 col-form-label">Category:</label>
        <div class="col-md-10">
            @*<InputNumber id="image" class="form-control" @bind-Value="product.CategoryId" />*@
            <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100"
                              AllowFiltering="true" Data=@Categories TextProperty="CategoryName" ValueProperty="Id"  @bind-Value="product.CategoryId"/>
            <ValidationMessage For="@(() => product.CategoryId)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Create</button>
        </div>
    </div>
</EditForm>

@code {
    private ProductModel product = new ProductModel();
    [Inject]
    public IProductHttpService ProductService { get; set; }
    [Inject]
    public IToastService toastService { get; set; }
    private async Task Create()
    {
        var result = await ProductService.CreateProduct(product);
        if (result.IsSuccess)
        {
            toastService.ShowSuccess(result.Message);
        }
        else
        {
            toastService.ShowError(result.Message);
        }
    }
    private void AssignImageUrl(string imgUrl) => product.Image = imgUrl;

    public List<string> StatusList { get; set; } = new List<string>();

    public List<string> BrandList { get; set; }

    [Inject]
    public ICategoryHttpService CategoryService { get; set; }

    public List<CategoryModel> Categories { get; set; } = new List<CategoryModel>();

    protected async override Task OnInitializedAsync()
    {
        await GetAllCategoryForProduct();

        StatusList.Add("unused");
        StatusList.Add("little used");
        StatusList.Add("unavailable");
        StatusList.Add("old");
        StatusList.Add("like New");

        string[] brandName = { "Acura", "Alfa Romeo", "Audi", "BMW", "Bentley", "Buick", "Cadillac", "Chevrolet", "Chrysler", "Dodge", "Fiat", "Ford", "GMC", "Genesis", "Honda", "Hyundai", "Jaguar", "Jeep", "Kia", "Land Rover", "Lexus", "Lincoln", "Lotus", "Lucid", "Maserati", "Mazda", "Mercedes-Benz", "Mercury", "Mini", "Mitsubishi", "Nissan", "Polestar", "Pontiac", "Porsche", "Ram", "Rivian", "Rolls-Royce", "Saab", "Saturn", "Scion", "Smart", "Subaru", "Suzuki", "Tesla", "Toyota", "Volkswagen", "Volvo" };
        BrandList = new List<string>(brandName);


    }
    private async Task GetAllCategoryForProduct()
    {
        var data = await CategoryService.GetCategory();
        Categories = data.Data.ToList();
    }
}
