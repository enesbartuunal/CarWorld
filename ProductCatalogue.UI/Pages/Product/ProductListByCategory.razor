@page "/{categoryid}"
<br />

@if (ProductList.Count > 0)
{

    <div class="row py-5">
        <div class="col">
            <RadzenCard>
                <RadzenDataList WrapItems="true" AllowPaging="true" Data="@ProductList.Where(x=>x.CategoryId==Convert.ToInt32(CategoryId)&&x.IsSold==false)" TItem="ProductModel" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" PagerAlwaysVisible="true">
                    <Template Context="product">
                        <RadzenCard Style="width: 100%; padding: 0; overflow: hidden;">


                            <div class="row">
                                <div class="col-lg-2 p-3 product-title">
                                    <img src=@product.Image style="width: 180px; height: 180px; border-radius: 8px;" />
                                </div>
                                <div class="col-lg-1 p-3 product-title">
                                    @(product.ProductName)
                                </div>
                                <div class="col-lg-5 p-3">
                                    <div class="row d-flex">
                                        <div class="col-md-6 col-lg-2">
                                            <h5 class="mb-0">Description</h5>
                                            <p class="mb-sm-2 mb-lg-0">@(product.Description)</p>
                                        </div>
                                        <div class="col-md-6 col-lg-2">
                                            <h5 class="mb-0">Color</h5>
                                            <p class="mb-sm-2 mb-lg-0">
                                                <svg width="100" height="100">
                                                    <circle cx="50" cy="50" r="10" stroke="green" stroke-width="1" fill=@(product.Color) />
                                                </svg>
                                            </p>
                                        </div>
                                        <div class="col-md-6 col-lg-2">
                                            <h5 class="mb-0">Brand</h5>
                                            <p class="mb-sm-2 mb-lg-2">@(product.Brand)</p>
                                        </div>
                                        <div class="col-md-6 col-lg-2">
                                            <h5 class="mb-0">Status</h5>
                                            <p class="mb-sm-2 mb-lg-0">@(product.Status)</p>
                                        </div>
                                        <div class="col-md-6 order-first order-lg-last col-lg-3 text-sm-left text-lg-right mb-3 mb-lg-0">
                                            <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", product.Price)}") />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-2 p-3">
                                    <RadzenButton Text="Buy" Class="w-50" ButtonStyle="@ButtonStyle.Success" Click="@(()=>ProductBuy(product))" />
                                </div>
                                <div class="col-lg-2 p-3">
                                    @if (product.IsOfferable == true)
                                    {
                                        if (!OfferList.Any(x => x.ProductId == product.Id))
                                        {
                                            <RadzenButton Text="Make Offer" Class="w-100" ButtonStyle="ButtonStyle.Secondary" Click=@(()=>OpenOrder(product.Id,product.Price)) />
                                        }
                                        else
                                        {
                                            <RadzenButton Text="You made an offer" Class="w-100" ButtonStyle="ButtonStyle.Light" />
                                        }
                                    }
                                    else
                                    {

                                    }
                                </div>

                            </div>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </RadzenCard>
        </div>

    </div>

    <style>
        .product-title {
            min-height: 72px;
            color: #da0074;
            background-color: rgba(255, 41, 155, .1);
            font-size: 20px;
            font-weight: bold;
            line-height: 20px;
            letter-spacing: -0.02em;
        }

        .price-badge {
            font-size: 16px;
            font-weight: bold;
            line-height: 20px;
            padding: 8px;
        }
    </style>

}
else
{
    <span>
        Loading products...
    </span>
}


@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    public IOfferHttpService OfferService { get; set; }

    [Inject]
    public IAuthenticationHttpService AccountService { get; set; }

    public List<ProductModel> ProductList { get; set; } = new List<ProductModel>();

    [Parameter]
    public string CategoryId { get; set; }

    public IEnumerable<OfferModel> OfferList { get; set; }

    public Result<string> _userId { get; set; }

    [Inject]
    public IProductHttpService Service { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var userdata = (await authenticationStateTask).User;
        _userId = await AccountService.GetUserIdbyName(userdata.Identity.Name);

        var result = await OfferService.GetOffer();
        OfferList = result.Data.Where(x => x.UserId == _userId.Data);


        var data = await Service.GetProductsByCategory();
        ProductList = data.Data.ToList();

    }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public void OpenOrder(int id, double price)
    {
        var url = Path.Combine("/createoffer/", id.ToString());
        var url2 = Path.Combine(url, price.ToString());

        NavigationManager.NavigateTo(url2);
    }

    [Inject]
    public IToastService toastService { get; set; }

    public async Task ProductBuy(ProductModel product)
    {
        await Task.Delay(2000);
        product.IsSold = true;
        var result = await Service.UpdateProduct(product);

        if (result.IsSuccess)
        {
            toastService.ShowSuccess(result.Message);

        }
        else
        {
            toastService.ShowError(result.Message);
        }
    }

}
